---
---

kbd {
	white-space: nowrap;
}

.table-sm {
	font-size: 0.65rem;
	line-height: 1.125;
}

.table-sm td {
	padding: .2rem .5rem;
}

.op, .bytes-cycles, .flags {
	display: block;
}

.table > tbody > tr > td:first-child {
	vertical-align: middle;
}

.table > thead > tr > th,
.table > tbody > tr > td {
	text-align: center;
}

.table > tbody > tr > td:first-child {
	font-weight: bold;
}

$op-illegal: #d6d8db;
$op-control: #f5c6cb;
$op-jump: #ffdeba;
$op-load: #c1b8ff;
$op-arithmetic: #ffeeba;
$op-arithmetic16: #f2c2b5;
$op-bit: #d8f5f9;
$op-load16: #c3e6cb;

$op-illegal-dark: #212529;
$op-control-dark: #7a171b;
$op-jump-dark: #a85e0d;
$op-load-dark: #282877;
$op-arithmetic-dark: #95730e;
$op-arithmetic16-dark: #9f4021;
$op-bit-dark: #137d8c;
$op-load16-dark: #035603;

$op-illegal-classic: #bfbfbf;
$op-control-classic: #ff99cc;
$op-jump-classic: #ffcc99;
$op-load-classic: #ccccff;
$op-arithmetic-classic: #ffff99;
$op-arithmetic16-classic: #ffcccc;
$op-bit-classic: #80ffff;
$op-load16-classic: #ccffcc;

.legend {
	display: block;
}

.legend-color {
	display: inline-block;
	width: 30px;
	height: 1em;
	vertical-align: middle;
}

.legend-control { background-color: $op-control; }
.legend-jump { background-color: $op-jump; }
.legend-load { background-color: $op-load; }
.legend-load16 { background-color: $op-load16; }
.legend-arithmetic { background-color: $op-arithmetic; }
.legend-arithmetic16 { background-color: $op-arithmetic16; }
.legend-bit { background-color: $op-bit; }

.theme-dark {
	.legend-control { background-color: $op-control-dark; }
	.legend-jump { background-color: $op-jump-dark; }
	.legend-load { background-color: $op-load-dark; }
	.legend-load16 { background-color: $op-load16-dark; }
	.legend-arithmetic { background-color: $op-arithmetic-dark; }
	.legend-arithmetic16 { background-color: $op-arithmetic16-dark; }
	.legend-bit { background-color: $op-bit-dark; }
}

.theme-classic {
	.legend-control { background-color: $op-control-classic; }
	.legend-jump { background-color: $op-jump-classic; }
	.legend-load { background-color: $op-load-classic; }
	.legend-load16 { background-color: $op-load16-classic; }
	.legend-arithmetic { background-color: $op-arithmetic-classic; }
	.legend-arithmetic16 { background-color: $op-arithmetic16-classic; }
	.legend-bit { background-color: $op-bit-classic; }
}

.opcode-table {
	.op-illegal {
		background-color: $op-illegal;
	}

	/* Control / misc */
	.op-nop,
	.op-stop,
	.op-halt,
	.op-prefix,
	.op-di,
	.op-ei {
		background-color: $op-control;
	}

	/* Jumps / calls */
	.op-call,
	.op-ret,
	.op-reti,
	.op-jp,
	.op-jr,
	.op-rst {
		background-color: $op-jump;
	}

	/* 8bit ops */
	.op-ld,
	.op-ldh {
		background-color: $op-load;
	}

	.op-inc,
	.op-dec,
	.op-daa,
	.op-scf,
	.op-inc,
	.op-dec,
	.op-cpl,
	.op-ccf,
	.op-add,
	.op-adc,
	.op-sub,
	.op-sbc,
	.op-and,
	.op-xor,
	.op-or,
	.op-cp {
		background-color: $op-arithmetic;
	}

	.op-rlca,
	.op-rrca,
	.op-rla,
	.op-rra,
	/* Prefixed bit manipulation ops */
	.op-rlc,
	.op-rrc,
	.op-rl,
	.op-rr,
	.op-sla,
	.op-sra,
	.op-swap,
	.op-srl,
	.op-bit,
	.op-res,
	.op-set {
		background-color: $op-bit;
	}

	/* 16bit ops */
	.op-ld.is16bit,
	.op-push,
	.op-pop {
		background-color: $op-load16;
	}

	.op-add.is16bit,
	.op-inc.is16bit,
	.op-dec.is16bit {
		background-color: $op-arithmetic16;
	}

	&.table-dark {
		.op-illegal {
			background-color: $op-illegal-dark;
		}

		/* Control / misc */
		.op-nop,
		.op-stop,
		.op-halt,
		.op-prefix,
		.op-di,
		.op-ei {
			background-color: $op-control-dark;
		}

		/* Jumps / calls */
		.op-call,
		.op-ret,
		.op-reti,
		.op-jp,
		.op-jr,
		.op-rst {
			background-color: $op-jump-dark;
		}

		/* 8bit ops */
		.op-ld,
		.op-ldh {
			background-color: $op-load-dark;
		}

		.op-inc,
		.op-dec,
		.op-daa,
		.op-scf,
		.op-dec,
		.op-cpl,
		.op-ccf,
		.op-add,
		.op-adc,
		.op-sub,
		.op-sbc,
		.op-and,
		.op-xor,
		.op-or,
		.op-cp {
			background-color: $op-arithmetic-dark;
		}

		.op-rlca,
		.op-rrca,
		.op-rla,
		.op-rra,
		/* Prefixed bit manipulation ops */
		.op-rlc,
		.op-rrc,
		.op-rl,
		.op-rr,
		.op-sla,
		.op-sra,
		.op-swap,
		.op-srl,
		.op-bit,
		.op-res,
		.op-set {
			background-color: $op-bit-dark;
		}

		/* 16bit ops */
		.op-ld.is16bit,
		.op-push,
		.op-pop {
			background-color: $op-load16-dark;
		}

		.op-add.is16bit,
		.op-inc.is16bit,
		.op-dec.is16bit {
			background-color: $op-arithmetic16-dark;
		}
	}
}

.theme-classic .opcode-table {
	&, thead, tbody, tr, th, td {
		border-color: #000;
	}

	th,
	tr > td:first-child {
		background-color: #9f9f9f;
	}

	.op-illegal {
		background-color: $op-illegal-classic;
	}

	/* Control / misc */
	.op-nop,
	.op-stop,
	.op-halt,
	.op-prefix,
	.op-di,
	.op-ei {
		background-color: $op-control-classic;
	}

	/* Jumps / calls */
	.op-call,
	.op-ret,
	.op-reti,
	.op-jp,
	.op-jr,
	.op-rst {
		background-color: $op-jump-classic;
	}

	/* 8bit ops */
	.op-ld,
	.op-ldh {
		background-color: $op-load-classic;
	}

	.op-inc,
	.op-dec,
	.op-daa,
	.op-scf,
	.op-inc,
	.op-dec,
	.op-cpl,
	.op-ccf,
	.op-add,
	.op-adc,
	.op-sub,
	.op-sbc,
	.op-and,
	.op-xor,
	.op-or,
	.op-cp {
		background-color: $op-arithmetic-classic;
	}

	.op-rlca,
	.op-rrca,
	.op-rla,
	.op-rra,
	/* Prefixed bit manipulation ops */
	.op-rlc,
	.op-rrc,
	.op-rl,
	.op-rr,
	.op-sla,
	.op-sra,
	.op-swap,
	.op-srl,
	.op-bit,
	.op-res,
	.op-set {
		background-color: $op-bit-classic;
	}

	/* 16bit ops */
	.op-ld.is16bit,
	.op-push,
	.op-pop {
		background-color: $op-load16-classic;
	}

	.op-add.is16bit,
	.op-inc.is16bit,
	.op-dec.is16bit {
		background-color: $op-arithmetic16-classic;
	}
}